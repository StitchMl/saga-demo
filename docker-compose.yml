services:
  # ------------- broker (choreographed only) -------------
  rabbitmq:
    image: rabbitmq:3.13-management
    ports: ["5672:5672", "15672:15672"]
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- CHOREOGRAPHER SAGA SERVICES ---
  choreographer-order-service:
    build: {context: ., dockerfile: backend/choreographer_saga/services/order_service/Dockerfile}
    environment:
      ORDER_SERVICE_PORT: 8081
      PAYMENT_AMOUNT_LIMIT: 2000.00
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      RABBITMQ_PUBLISH_TIMEOUT_SECONDS: 5
    depends_on: {rabbitmq: {condition: service_healthy}}

  choreographer-inventory-service:
    build: {context: ., dockerfile: backend/choreographer_saga/services/inventory_service/Dockerfile}
    environment:
      INVENTORY_SERVICE_PORT: 8082
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      RABBITMQ_PUBLISH_TIMEOUT_SECONDS: 5
    depends_on: {rabbitmq: {condition: service_healthy}}

  choreographer-payment-service:
    build: {context: ., dockerfile: backend/choreographer_saga/services/payment_service/Dockerfile}
    environment:
      PAYMENT_SERVICE_PORT: 8083
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      RABBITMQ_PUBLISH_TIMEOUT_SECONDS: 5
      PAYMENT_AMOUNT_LIMIT: 2000.00
    depends_on: { rabbitmq: { condition: service_healthy } }

  choreographer-auth-service:
    build: {context: ., dockerfile: backend/choreographer_saga/services/auth_service/Dockerfile}
    environment:
      AUTH_SERVICE_PORT: 8084

  # --- ORCHESTRATOR SAGA SERVICES ---
  orchestrator-order-service:
    build: {context: ., dockerfile: backend/orchestrator_saga/services/order_service/Dockerfile}
    environment:
      ORDER_SERVICE_PORT: 8081
      PAYMENT_AMOUNT_LIMIT: 2000.00

  orchestrator-inventory-service:
    build: {context: ., dockerfile: backend/orchestrator_saga/services/inventory_service/Dockerfile}
    environment:
      INVENTORY_SERVICE_PORT: 8082

  orchestrator-payment-service:
    build: {context: ., dockerfile: backend/orchestrator_saga/services/payment_service/Dockerfile}
    environment:
      PAYMENT_SERVICE_PORT: 8083
      PAYMENT_AMOUNT_LIMIT: 2000.00

  orchestrator-auth-service:
    build: {context: ., dockerfile: backend/orchestrator_saga/services/auth_service/Dockerfile}
    environment:
      AUTH_SERVICE_PORT: 8084

  # MAIN ORCHESTRATOR SERVICE
  orchestrator:
    build: {context: ., dockerfile: backend/orchestrator_saga/Dockerfile}
    environment:
      ServerPort: 8080
      OrderServiceURL: http://orchestrator-order-service:8081
      InventoryServiceURL: http://orchestrator-inventory-service:8082
      PaymentServiceURL: http://orchestrator-payment-service:8083
      AuthServiceURL: http://orchestrator-auth-service:8084
      SERVICE_CALL_TIMEOUT_SECONDS: 10

  # ---------- GATEWAY and FRONTEND (always active) ----------
  # --- API Gateway ---
  api-gateway:
    build: {context: ., dockerfile: backend/gateway/Dockerfile}
    ports:
      - "${GATEWAY_PORT:-8000}:${GATEWAY_PORT:-8000}"
    environment:
      GATEWAY_PORT: 8000
      CHOREOGRAPHER_INVENTORY_BASE_URL: http://choreographer-inventory-service:8082
      ORCHESTRATOR_INVENTORY_BASE_URL:  http://orchestrator-inventory-service:8082
      CHOREOGRAPHER_ORDER_BASE_URL:     http://choreographer-order-service:8081
      ORCHESTRATOR_ORDER_BASE_URL:      http://orchestrator-order-service:8081
      ORCHESTRATOR_SERVICE_URL:         http://orchestrator:8080
      CHOREOGRAPHER_AUTH_BASE_URL:      http://choreographer-auth-service:8084
      ORCHESTRATOR_AUTH_BASE_URL:       http://orchestrator-auth-service:8084
    depends_on:
      - choreographer-inventory-service
      - orchestrator-inventory-service
      - choreographer-order-service
      - orchestrator-order-service
      - orchestrator
      - choreographer-auth-service
      - orchestrator-auth-service
      - choreographer-payment-service
      - orchestrator-payment-service

  # --- Frontend Service ---
  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes: [ "./frontend:/app" ]
    ports: [ "8090:3000" ]
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:${GATEWAY_PORT:-8000}
      - CHOKIDAR_USEPOLLING=true
      - NODE_OPTIONS=--no-deprecation
    command: sh -c "if [ ! -d 'node_modules' ]; then npm install; fi && npm start"
    depends_on: { api-gateway: { condition: service_started } }

networks:
  default:

volumes:
  rabbitmq_data:
  rabbitmq_log: