# This file defines and configures the Docker services for the SAGA app.

version: '3.8' # Specifies the version of the Docker Compose format.

services:
  # Event Bus Service (Choreography)
  event-bus:
    build: ./event-bus # Builds the image from the event-bus directory.
    ports:
      - "8070:8070" # Map internal port 8070 to external port 8070.
    restart: always # Always restart the container if it stops.
    healthcheck: # Healthcheck to verify that the service is active and responsive.
      test: ["CMD", "curl", "-f", "http://localhost:8070/publish"] # Test the /publish an endpoint.
      interval: 10s # Check every 10 seconds.
      timeout: 5s # Timeout for each control.
      retries: 5 # Amount attempts before considering the service unsound.
      start_period: 20s # Initial period for starting the container before starting the controls.

  # SAGA Orchestrator Service
  orchestrator:
    build: ./orchestrator # Builds the image from the orchestrator directory.
    ports:
      - "8080:8080" # Map internal port 8080 to external port 8080.
    restart: always
    depends_on: # It ensures that dependent services are started earlier.
      order-service:
        condition: service_healthy # It depends on healthy order-service.
      payment-service:
        condition: service_healthy # It depends on healthy payment.
      shipping-service:
        condition: service_healthy # It depends on healthy shipping-service.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/saga"] # Test the endpoint /saga.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Order Service (SAGA Orchestrated)
  order-service:
    build: ./order-service
    ports:
      - "8281:8081" # Map internal port 8081 to external port 8281.
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/orders"] # Test the /orders endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Order Service (SAGA Choreographed)
  order-service-choreo:
    build: ./order-service-choreo
    ports:
      - "8181:8081" # Map internal port 8081 to external port 8181.
    restart: always
    depends_on:
      event-bus:
        condition: service_healthy # Depends on a healthy event-bus for subscription.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/orders"] # Test the /orders endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Payment Service (SAGA Orchestrated)
  payment-service:
    build: ./payment-service
    ports:
      - "8282:8082" # Map internal port 8082 to external port 8282.
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/pay"] # Test the /pay endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Payment Service (SAGA Choreographed)
  payment-service-choreo:
    build: ./payment-service-choreo
    ports:
      - "8182:8082" # Map internal port 8082 to external port 8182.
    restart: always
    depends_on:
      event-bus:
        condition: service_healthy # Depends on a healthy event bus for subscription.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/pay"] # Test the /pay endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Shipping Service (Orchestrated SAGA)
  shipping-service:
    build: ./shipping-service
    ports:
      - "8283:8083" # Map internal port 8083 to external port 8283.
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/ship"] # Test the /ship endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Shipping Service (SAGA Choreographed)
  shipping-service-choreo:
    build: ./shipping-service-choreo
    ports:
      - "8183:8083" # Map internal port 8083 to external port 8183.
    restart: always
    depends_on:
      event-bus:
        condition: service_healthy # It depends on a healthy event-bus for subscription.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/ship"] # Test the /ship endpoint.
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Frontend (Nginx)
  frontend:
    build:
      context: ./frontend # Construction context for the frontend Dockerfile.
      dockerfile: Dockerfile # Specifies the Dockerfile to be used.
    ports:
      - "5000:80" # Map internal port 80 (Nginx) to external port 5000.
    restart: always
    environment: # Pass environment variables to Nginx for dynamic configuration of proxies.
      ORCHESTRATOR_HOST: orchestrator
      ORDER_SERVICE_CHOREO_HOST: order-service-choreo
      PAYMENT_SERVICE_CHOREO_HOST: payment-service-choreo
      SHIPPING_SERVICE_CHOREO_HOST: shipping-service-choreo
    depends_on: # Ensures that all backend services are started and healthy before the frontend.
      event-bus:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      order-service:
        condition: service_healthy
      order-service-choreo:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      payment-service-choreo:
        condition: service_healthy
      shipping-service:
        condition: service_healthy
      shipping-service-choreo:
        condition: service_healthy